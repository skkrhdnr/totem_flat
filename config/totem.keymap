//
//                                                        ▀▀▀▀▀     ▀▀▀▀▀          ▀▀█▀▀
//                                                        ▄▀▀▀▄  ▄  ▄▀▀▀▄  ▄  ▄▀▀▀▄  █  ▄▀▀▀▄
//                                                        █   █  █  █   █  █  █   █  █  █   █
//                                                         ▀▀▀   █   ▀▀▀   █   ▀▀▀   ▀   ▀▀▀
//                                                               █      ▄▄▄█▄▄▄    █   █  
//                                                               ▀      █  █  █     █▄█
//                                                             ▀▀▀▀▀    █  █  █      ▀
//                                                                      ▀  ▀  ▀
//
// ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

//
//       ___________________________________
//      |  0  1  2  3  4  |   5  6  7  8  9 | 
//   ___| 10 11 12 13 14  |  15 16 17 18 19 |__
//  |  20 21 22 23 24 25  |  26 27 28 29 30 31 |
//  -------------------------------------------
//            | 32 33 34  |  35 36 37 |
//             -----------------------

#define BASE 0
#define NAV  1
#define NUM  2
#define SYM  3
#define FNC  4
#define INP  5
#define COMBO_MS  30
#define COMBO3_MS 50

/ {
    combos {
        compatible = "zmk,combos";

        combo_ctrl_en {
            bindings = <&enenter>;
            key-positions = <16 18>;
            layers = <0>;
        };

        combo_caps {
            bindings = <&caps_word>;
            key-positions = <13 16>;
            timeout-ms = <COMBO_MS>;
            layers = <0>;
        };

        combo_jp {
            bindings = <&kp LANGUAGE_1>;
            key-positions = <16 17>;
            layers = <0>;
            require-prior-idle-ms = <50>;
        };

        combo_en {
            bindings = <&kp LANGUAGE_2>;
            key-positions = <12 13>;
            layers = <0>;
            require-prior-idle-ms = <50>;
        };

        combo_src {
            bindings = <&combo_src>;
            key-positions = <34 35>;
            layers = <0>;
        };
    };

    macros {
        bt_0: bt_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 0>;
        };

        bt_1: bt_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 1>;
        };

        bt_2: bt_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 2>;
        };

        arigatou: arigatou {
            compatible = "zmk,behavior-macro";
            label = "ARIGATOU";
            #binding-cells = <0>;
            bindings = <&kp LANG1 &kp A &kp R &kp I &kp G &kp A &kp T &kp O &kp U &kp G &kp O &kp Z &kp A &kp I &kp M &kp A &kp S &kp U>;
        };

        combo_src: combo_src {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp N5 &kp N7 &kp N0 &kp N4 &kp ENTER>;
            label = "COMBO_SRC";
        };

        double_enter: double_enter {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp ENTER &kp ENTER>;
            label = "DOUBLE_ENTER";
        };

        enenter: enenter {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(SEMICOLON) &kp LANGUAGE_2 &kp LANGUAGE_1>;
            label = "ENENTER";
        };
    };

    lp: lp {
        compatible = "zmk,behavior-hold-tap";
        label = "LAYER|KP";
        flavor = "hold-preferred";
        tapping-term-ms = <160>;
        quick-tap-ms = <160>;
        bindings = <&mo>, <&kp>;

        #binding-cells = <2>;
    };

    cm_right: cm_right {
        compatible = "zmk,behavior-hold-tap";
        label = "CM_RIGHT";
        flavor = "tap-preferred";
        tapping-term-ms = <160>;
        quick-tap-ms = <160>;

        //global-quick-tap;

        bindings = <&kp>, <&kp>;

        #binding-cells = <2>;
    };

    cm_left: cm_left {
        compatible = "zmk,behavior-hold-tap";
        label = "CM_LEFT";
        bindings = <&kp>, <&kp>;

        #binding-cells = <2>;
        tapping-term-ms = <160>;
        quick-tap-ms = <160>;
        flavor = "tap-unless-interrupted";
        hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 26 27 28 29 30 31 35 36 37>;
    };

    cm: cm {
        compatible = "zmk,behavior-hold-tap";
        label = "CM";
        flavor = "tap-preferred";
        tapping-term-ms = <160>;
        quick-tap-ms = <160>;
        bindings = <&kp>, <&kp>;

        #binding-cells = <2>;
    };

    behaviors {
    };

    keymap {
        compatible = "zmk,keymap";

        // ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

        base_layer {
            label = "BASE";
            bindings = <
                 &kp Q        &kp W       &kp E             &kp R        &kp T               &kp Y                &kp U        &kp I             &kp O       &kp P
                 &cm LCTRL A  &cm LALT S  &cm LGUI D        &cm LSHFT F  &cm LG(LSHIFT) G    &cm RS(RIGHT_GUI) H  &cm RSHFT J  &cm RGUI K        &cm RALT L  &cm RCTRL MINUS
&cm LALT ESCAPE  &kp Z        &kp X       &kp C             &kp V        &kp B               &kp N                &kp M        &kp COMMA         &kp PERIOD  &kp SLASH        &lp 6 RS(RG(J))
                                          &lp 3 LANGUAGE_2  &lp 2 SPACE  &lp 4 TAB           &lp 5 BACKSPACE      &lp 1 ENTER  &lp 4 LANGUAGE_1
            >;
        };

        nav {
            label = "NAV";
            bindings = <
       &none        &kp HOME        &kp UP_ARROW       &kp END          &kp LG(T)        &trans     &trans     &trans    &trans    &trans
       &kp LG(TAB)  &kp LEFT_ARROW  &kp DOWN_ARROW     &kp RIGHT_ARROW  &kp LA(TAB)      &kp RCTRL  &kp RSHFT  &kp RGUI  &kp RALT  &kp RCTRL
&none  &kp LG(Z)    &kp LG(X)       &kp LG(C)          &kp LG(V)        &kp LG(LS(V))    &trans     &none      &none     &none     &none      &kp GLOBE
                                    &kp K_APPLICATION  &kp SPACE        &kp TAB          &none      &none      &none
            >;
        };

        sym {
            label = "SYM";
            bindings = <
       &kp EXCL  &kp AT    &kp HASH   &kp DLLR  &kp PRCNT    &kp CARET     &kp AMPS  &kp STAR  &kp LBRC   &kp RBRC
       &kp BSLH  &kp PIPE  &kp EQUAL  &kp PLUS  &kp TILDE    &kp GRAVE     &kp SQT   &kp DQT   &kp COLON  &kp SEMI
&none  &none     &none     &none      &none     &none        &none         &kp LPAR  &kp RPAR  &kp LBKT   &kp RBKT  &none
                           &none      &none     &none        &kp QUESTION  &kp EXCL  &none
            >;
        };

        num {
            label = "NUM";
            bindings = <
       &none  &kp F7  &kp F8  &kp F9    &kp F12      &kp INT_YEN    &kp N7        &kp N8  &kp N9  &kp KP_EQUAL
       &none  &kp F4  &kp F5  &kp F6    &kp F11      &kp PLUS       &kp N4        &kp N5  &kp N6  &kp MINUS
&none  &none  &kp F1  &kp F2  &kp F3    &kp F10      &kp STAR       &kp N1        &kp N2  &kp N3  &kp FSLH      &none
                      &none   &kp LEFT  &kp RIGHT    &kp BACKSPACE  &kp NUMBER_0  &none
            >;
        };

        numpad {
            label = "NUMPAD";
            bindings = <
       &none  &kp F7  &kp F8  &kp F9    &kp F12      &kp INT_YEN    &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &kp KP_EQUAL
       &none  &kp F4  &kp F5  &kp F6    &kp F11      &kp PLUS       &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &kp MINUS
&none  &none  &kp F1  &kp F2  &kp F3    &kp F10      &kp STAR       &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_N3        &kp FSLH      &none
                      &none   &kp LEFT  &kp RIGHT    &kp BACKSPACE  &kp KP_NUMBER_0  &none
            >;
        };

        fnc {
            label = "FNC";
            bindings = <
       &none  &kp LG(LEFT_BRACKET)  &kp LG(UP_ARROW)    &kp LG(RIGHT_BRACKET)  &none            &kp C_PP    &kp C_PREVIOUS        &kp C_NEXT            &none  &none
       &none  &kp LC(LS(TAB))       &kp LG(DOWN_ARROW)  &kp LC(TAB)            &none            &kp K_MUTE  &kp RS(RA(C_VOL_DN))  &kp RS(RA(C_VOL_UP))  &none  &kp C_SLEEP
&none  &none  &kp RA(UP)            &none               &kp RA(DOWN)           &none            &none       &kp C_BRI_DEC         &kp C_BRI_INC         &none  &none        &none
                                    &kp LG(N0)          &kp LG(PLUS)           &kp LG(MINUS)    &none       &none                 &none
            >;
        };

        bt {
            label = "FNC";
            bindings = <
       &none  &none  &none  &none  &none    &none  &none  &none  &none  &bt BT_CLR
       &none  &none  &none  &none  &none    &none  &none  &none  &none  &none
&none  &none  &none  &none  &none  &none    &none  &none  &none  &none  &none       &none
                     &none  &none  &none    &bt_0  &bt_1  &bt_2
            >;
        };

        //nav_layer { label = "template"; bindings = <
        //          &none          &none          &none          &none          &none          &none          &none          &none          &none          &none
        //          &none          &none          &none          &none          &none          &none          &none          &none          &none          &none          
        //&none          &none          &none          &none          &none          &none          &none          &none          &none          &none          &none          &none          
        //                                      &none          &none          &none          &none          &none          &none
        //>;};
        // ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
    };

    conditional_layers { compatible = "zmk,conditional-layers"; };
};
