//
//                                                        ▀▀▀▀▀     ▀▀▀▀▀          ▀▀█▀▀
//                                                        ▄▀▀▀▄  ▄  ▄▀▀▀▄  ▄  ▄▀▀▀▄  █  ▄▀▀▀▄
//                                                        █   █  █  █   █  █  █   █  █  █   █
//                                                         ▀▀▀   █   ▀▀▀   █   ▀▀▀   ▀   ▀▀▀
//                                                               █      ▄▄▄█▄▄▄    █   █  
//                                                               ▀      █  █  █     █▄█
//                                                             ▀▀▀▀▀    █  █  █      ▀
//                                                                      ▀  ▀  ▀
//
// ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

//
//       ___________________________________
//      |  0  1  2  3  4  |   5  6  7  8  9 | 
//   ___| 10 11 12 13 14  |  15 16 17 18 19 |__
//  |  20 21 22 23 24 25  |  26 27 28 29 30 31 |
//  -------------------------------------------
//            | 32 33 34  |  35 36 37 |
//             -----------------------

#define BASE 0
#define NAV  1
#define NUM  2
#define SYM  3
#define FNC  4
#define INP  5
#define COMBO_MS  30
#define COMBO3_MS 50

/ {
    combos {
        compatible = "zmk,combos";

        combo_left_enter {
            bindings = <&kp ENTER>;
            key-positions = <23 24>;
            layers = <0>;
        };

        combo_ctrl_en {
            bindings = <&enenter>;
            key-positions = <16 18>;
            layers = <0 1>;
        };

        combo_caps {
            bindings = <&caps_word>;
            key-positions = <13 16>;
            timeout-ms = <COMBO_MS>;
            layers = <0 1>;
        };

        combo_jp {
            bindings = <&kp LANGUAGE_1>;
            key-positions = <16 17>;
            layers = <0 1>;
            require-prior-idle-ms = <50>;
        };

        combo_en {
            bindings = <&kp LANGUAGE_2>;
            key-positions = <12 13>;
            layers = <0 1>;
            require-prior-idle-ms = <50>;
        };

        combo_src {
            bindings = <&combo_src>;
            key-positions = <34 35>;
            layers = <0 1>;
        };

        combo_next_app {
            bindings = <&kp RG(TAB)>;
            key-positions = <2 3>;
            layers = <2>;
        };

        comb_prev_app {
            bindings = <&kp RG(RS(TAB))>;
            key-positions = <2 1>;
            layers = <2>;
        };

        combo_next_window {
            bindings = <&kp RA(TAB)>;
            key-positions = <23 24>;
            layers = <2>;
        };

        combo_prev_window {
            bindings = <&kp RA(RS(TAB))>;
            key-positions = <23 22>;
            layers = <2>;
        };

        combo_esc {
            bindings = <&kp ESCAPE>;
            key-positions = <11 13>;
            layers = <0 1>;
        };

        combo_tab {
            bindings = <&kp TAB>;
            key-positions = <13 33>;
            layers = <0 1>;
        };

        combo_bs {
            bindings = <&kp BACKSPACE>;
            key-positions = <16 36>;
            layers = <0 1>;
        };

        combo_y {
            bindings = <&kp Y>;
            key-positions = <3 4>;
            layers = <0 1>;
        };

        combo_base-ons {
            bindings = <&tog 1>;
            key-positions = <32 37>;
            layers = <0 1>;
        };
    };

    macros {
        bt_0: bt_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 0>;
        };

        bt_1: bt_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 1>;
        };

        bt_2: bt_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 2>;
        };

        arigatou: arigatou {
            compatible = "zmk,behavior-macro";
            label = "ARIGATOU";
            #binding-cells = <0>;
            bindings = <&kp LANG1 &kp A &kp R &kp I &kp G &kp A &kp T &kp O &kp U &kp G &kp O &kp Z &kp A &kp I &kp M &kp A &kp S &kp U>;
        };

        shita_line: shita_line {
            compatible = "zmk,behavior-macro";
            label = "SHITA_LINE";
            #binding-cells = <0>;
            bindings = <&kp RG(RIGHT) &kp ENTER>;
        };

        ue_line: ue_line {
            compatible = "zmk,behavior-macro";
            label = "UE_LINE";
            #binding-cells = <0>;
            bindings = <&kp RG(LEFT) &kp ENTER &kp UP>;
        };

        combo_src: combo_src {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp N5 &kp N7 &kp N0 &kp N4 &kp ENTER>;
            label = "COMBO_SRC";
        };

        double_enter: double_enter {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp ENTER &kp ENTER>;
            label = "DOUBLE_ENTER";
        };

        enenter: enenter {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(SEMICOLON) &kp LANGUAGE_2 &kp LANGUAGE_1>;
            label = "ENENTER";
        };
    };

    lp: lp {
        compatible = "zmk,behavior-hold-tap";
        label = "LAYER|KP";
        flavor = "hold-preferred";
        tapping-term-ms = <200>;
        quick-tap-ms = <200>;
        bindings = <&mo>, <&kp>;

        #binding-cells = <2>;
    };

    lpy: lpy {
        compatible = "zmk,behavior-hold-tap";
        label = "yLAYER|KP";
        flavor = "hold-preferred";
        tapping-term-ms = <250>;
        bindings = <&mo>, <&kp>;

        #binding-cells = <2>;
    };

    cm_right: cm_right {
        compatible = "zmk,behavior-hold-tap";
        label = "CM_RIGHT";
        flavor = "tap-preferred";
        tapping-term-ms = <165>;
        quick-tap-ms = <165>;

        //global-quick-tap;

        bindings = <&kp>, <&kp>;

        #binding-cells = <2>;
        hold-trigger-key-positions = <25 0 10 11 12 13 20 21 22 23 24 32 0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 25 32 33 34 35>;
    };

    cm_left: cm_left {
        compatible = "zmk,behavior-hold-tap";
        label = "CM_LEFT";
        bindings = <&kp>, <&kp>;

        #binding-cells = <2>;
        tapping-term-ms = <165>;
        quick-tap-ms = <165>;
        flavor = "tap-preferred";
        hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 26 27 28 29 30 31 35 36 37>;
    };

    lp_left: lp_left {
        compatible = "zmk,behavior-hold-tap";
        label = "LP_LEFT";
        bindings = <&mo>, <&kp>;

        #binding-cells = <2>;
        tapping-term-ms = <165>;
        quick-tap-ms = <165>;
        flavor = "tap-preferred";
        hold-trigger-key-positions = <5 5 6 7 8 9 15 16 17 18 19 26 27 28 29 30 31 36 37 15 26 35 36>;
    };

    lp_right: lp_right {
        compatible = "zmk,behavior-hold-tap";
        label = "LP_RIGHT";
        bindings = <&mo>, <&kp>;

        #binding-cells = <2>;
        tapping-term-ms = <165>;
        quick-tap-ms = <165>;
        hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 21 22 23 24 25 32 33 34 20>;
        flavor = "tap-preferred";
    };

    behaviors {
    };

    keymap {
        compatible = "zmk,keymap";

        // ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

        base_layer {
            label = "BASE";
            bindings = <
              &kp Q             &kp W            &kp E                  &kp R             &kp T                  &kp Y                 &kp U              &kp I             &kp O             &kp P
              &cm_left LCTRL A  &cm_left LALT S  &cm_left LGUI D        &cm_left LSHFT F  &cm_left LS(LGUI) G    &cm_right RS(RGUI) H  &cm_right RSHFT J  &cm_right RGUI K  &cm_right RALT L  &kp MINUS
&lp 7 ESCAPE  &kp Z             &kp X            &kp C                  &lp_left 4 V      &kp B                  &kp N                 &lp_right 4 M      &kp COMMA         &kp PERIOD        &kp SLASH  &kp UNDERSCORE
                                                 &lp_left 5 LANGUAGE_2  &lp 3 SPACE       &lp 6 TAB              &lp 7 BACKSPACE       &lpy 2 ENTER       &kp LANGUAGE_1
            >;
        };

        ons {
            label = "ONS";
            bindings = <
              &kp Q             &kp L            &kp U                  &kp COMMA         &kp PERIOD                 &kp F                 &kp W              &kp R             &kp Y             &kp P
              &cm_left LCTRL E  &cm_left LALT I  &cm_left LGUI A        &cm_left LSHFT O  &cm_left LS(LGUI) MINUS    &cm_right RS(RGUI) K  &cm_right RSHFT T  &cm_right RGUI N  &cm_right RALT S  &kp H
&lp 7 ESCAPE  &kp Z             &kp X            &kp C                  &lp_left 4 V      &kp SEMICOLON              &kp G                 &lp_right 4 D      &kp M             &kp J             &kp B  &kp UNDERSCORE
                                                 &lp_left 5 LANGUAGE_2  &lp 3 SPACE       &lp 6 TAB                  &lp 7 BACKSPACE       &lpy 2 ENTER       &kp LANGUAGE_1
            >;
        };

        nav {
            label = "NAV";
            bindings = <
       &none         &kp LC(LS(TAB))  &kp UP_ARROW    &kp LC(TAB)      &kp LG(T)        &trans     &trans     &trans    &trans    &trans
       &kp LA(LEFT)  &kp LEFT_ARROW   &kp DOWN_ARROW  &kp RIGHT_ARROW  &kp LA(RIGHT)    &kp RCTRL  &kp RSHFT  &kp RGUI  &kp RALT  &kp RCTRL
&none  &kp LG(Z)     &kp LG(X)        &kp LG(C)       &kp LG(V)        &kp LG(B)        &trans     &none      &none     &none     &none      &none
                                      &none           &kp SPACE        &kp TAB          &none      &none      &none
            >;
        };

        sym {
            label = "SYM";
            bindings = <
       &kp EXCL  &kp AT    &kp HASH   &kp DLLR  &kp PRCNT    &kp CARET     &kp AMPS  &kp STAR  &kp LBRC   &kp RBRC
       &kp BSLH  &kp PIPE  &kp EQUAL  &kp PLUS  &none        &kp GRAVE     &kp SQT   &kp DQT   &kp COLON  &kp SEMI
&none  &none     &none     &none      &none     &none        &none         &kp LPAR  &kp RPAR  &kp LBKT   &kp RBKT  &none
                           &none      &none     &none        &kp QUESTION  &kp EXCL  &none
            >;
        };

        num {
            label = "NUM";
            bindings = <
       &none  &kp F7  &kp F8  &kp F9    &kp F12      &none          &kp N7        &kp N8  &kp N9  &none
       &none  &kp F4  &kp F5  &kp F6    &kp F11      &kp PLUS       &kp N4        &kp N5  &kp N6  &kp MINUS
&none  &none  &kp F1  &kp F2  &kp F3    &kp F10      &kp STAR       &kp N1        &kp N2  &kp N3  &kp FSLH   &none
                      &none   &kp LEFT  &kp RIGHT    &kp BACKSPACE  &kp NUMBER_0  &none
            >;
        };

        numpad {
            label = "NUMPAD";
            bindings = <
       &none  &kp F7  &kp F8  &kp F9    &kp F12      &none          &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &none
       &none  &kp F4  &kp F5  &kp F6    &kp F11      &kp PLUS       &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &kp MINUS
&none  &none  &kp F1  &kp F2  &kp F3    &kp F10      &kp STAR       &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_N3        &kp FSLH   &none
                      &none   &kp LEFT  &kp RIGHT    &kp BACKSPACE  &kp KP_NUMBER_0  &none
            >;
        };

        numcom {
            label = "NUMCOM";
            bindings = <
       &kp LG(Q)  &kp LG(W)  &kp LG(E)  &kp LG(R)  &kp LG(T)    &none          &kp N7        &kp N8  &kp N9  &none
       &kp LG(A)  &kp LG(S)  &kp LG(D)  &kp LG(F)  &kp LG(G)    &kp PLUS       &kp N4        &kp N5  &kp N6  &kp MINUS
&none  &kp LG(Z)  &kp LG(X)  &kp LG(C)  &kp LG(V)  &kp LG(B)    &kp STAR       &kp N1        &kp N2  &kp N3  &kp FSLH   &none
                             &none      &none      &none        &kp BACKSPACE  &kp NUMBER_0  &none
            >;
        };

        fnc {
            label = "FNC";
            bindings = <
       &none  &kp LG(LEFT_BRACKET)  &kp LG(UP_ARROW)    &kp LG(RIGHT_BRACKET)  &none            &kp C_PP    &kp C_PREVIOUS        &kp C_NEXT            &none  &none
       &none  &kp LC(LS(TAB))       &kp LG(DOWN_ARROW)  &kp LC(TAB)            &none            &kp K_MUTE  &kp RS(RA(C_VOL_DN))  &kp RS(RA(C_VOL_UP))  &none  &none
&none  &none  &kp RA(UP)            &none               &kp RA(DOWN)           &none            &none       &kp C_BRI_DEC         &kp C_BRI_INC         &none  &none  &bt BT_CLR
                                    &kp LG(N0)          &kp LG(PLUS)           &kp LG(MINUS)    &bt_0       &bt_1                 &bt_2
            >;
        };

        layout {
            bindings = <
                       &trans                 &kp LS(LA(LC(LG(LEFT_ARROW))))  &kp LS(LA(LC(LG(UP_ARROW))))  &kp LS(LC(LG(LA(RIGHT))))  &trans    &trans  &trans  &trans  &trans  &trans
                       &kp LS(LA(LC(LG(A))))  &kp LS(LC(LA(LG(S))))           &kp LS(LA(LC(LG(D))))         &kp LS(LA(LC(LG(F))))      &trans    &trans  &trans  &trans  &trans  &trans
&kp LS(LA(LC(LG(N))))  &trans                 &kp LS(LA(LC(LG(J))))           &kp LS(LA(LC(LG(K))))         &kp LS(LA(LC(LG(L))))      &trans    &trans  &trans  &trans  &trans  &trans  &trans
                                                                              &trans                        &kp LS(LA(LC(LG(SPACE))))  &trans    &trans  &trans  &trans
            >;
        };

        fc {
            bindings = <
       &none  &none  &kp E  &none  &kp T    &none  &kp U  &kp I      &kp O    &none
       &none  &kp S  &kp D  &kp F  &kp G    &none  &kp J  &kp K      &kp L    &none
&none  &none  &none  &none  &none  &kp B    &none  &kp M  &kp COMMA  &kp DOT  &none  &none
                     &none  &kp A  &kp A    &kp A  &kp A  &none
            >;
        };

        //nav_layer { label = "template"; bindings = <
        //          &none          &none          &none          &none          &none          &none          &none          &none          &none          &none
        //          &none          &none          &none          &none          &none          &none          &none          &none          &none          &none          
        //&none          &none          &none          &none          &none          &none          &none          &none          &none          &none          &none          &none          
        //                                      &none          &none          &none          &none          &none          &none
        //>;};
        // ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
    };

    conditional_layers { compatible = "zmk,conditional-layers"; };
};
