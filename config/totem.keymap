//
//                                                        ▀▀▀▀▀     ▀▀▀▀▀          ▀▀█▀▀
//                                                        ▄▀▀▀▄  ▄  ▄▀▀▀▄  ▄  ▄▀▀▀▄  █  ▄▀▀▀▄
//                                                        █   █  █  █   █  █  █   █  █  █   █
//                                                         ▀▀▀   █   ▀▀▀   █   ▀▀▀   ▀   ▀▀▀
//                                                               █      ▄▄▄█▄▄▄    █   █  
//                                                               ▀      █  █  █     █▄█
//                                                             ▀▀▀▀▀    █  █  █      ▀
//                                                                      ▀  ▀  ▀
//
// ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

//
//       ___________________________________
//      |  0  1  2  3  4  |   5  6  7  8  9 | 
//   ___| 10 11 12 13 14  |  15 16 17 18 19 |__
//  |  20 21 22 23 24 25  |  26 27 28 29 30 31 |
//  -------------------------------------------
//            | 32 33 34  |  35 36 37 |
//             -----------------------

#define BASE 0
#define NAV  1
#define NUM  2
#define SYM  3
#define FNC  4
#define INP  5
#define COMBO_MS  30
#define COMBO3_MS 50

/ {
    combos {
        compatible = "zmk,combos";

        combo_esc {
            timeout-ms = <COMBO_MS>;
            key-positions = <14 13>;
            bindings = <&kp ESC>;
            layers = <0 1>;
        };

        combo_macro_arigatou {
            bindings = <&arigatou>;
            key-positions = <3 11 7>;
            timeout-ms = <COMBO3_MS>;
            layers = <0>;
        };

        combo_macro_yoroshiku {
            bindings = <&yorosihku>;
            key-positions = <3 5 8>;
            timeout-ms = <COMBO3_MS>;
            layers = <0>;
        };

        combo_tab {
            bindings = <&kp TAB>;
            key-positions = <12 13>;
            timeout-ms = <COMBO_MS>;
            layers = <0 1>;
        };

        combo_graphic_y {
            bindings = <&kp Y>;
            key-positions = <24 25>;
            timeout-ms = <COMBO_MS>;
        };

        combo_left_enter {
            bindings = <&kp ENTER>;
            key-positions = <33 13>;
            layers = <0>;
        };

        combo_ctrl_en {
            bindings = <&kp LC(SEMICOLON)>;
            key-positions = <16 18>;
            layers = <0 1>;
        };

        combo_bs {
            bindings = <&kp BACKSPACE>;
            key-positions = <16 17>;
            timeout-ms = <COMBO_MS>;
            layers = <0 1>;
        };

        combo_caps {
            bindings = <&caps_word>;
            key-positions = <13 16>;
            timeout-ms = <COMBO_MS>;
            layers = <0 1>;
        };

        combo_question {
            bindings = <&kp QUESTION>;
            key-positions = <29 28>;
            timeout-ms = <COMBO_MS>;
        };

        combo_excl {
            bindings = <&kp EXCL>;
            key-positions = <27 28>;
            timeout-ms = <COMBO_MS>;
        };

        combo_cmd_bs {
            bindings = <&kp LG(BACKSPACE)>;
            key-positions = <15 16>;
            timeout-ms = <COMBO_MS>;
            layers = <0 1>;
        };

        combo_opt_bs {
            bindings = <&kp LA(BACKSPACE)>;
            key-positions = <17 18>;
            layers = <0 1>;
        };

        combo_shift_tab {
            bindings = <&kp LS(TAB)>;
            key-positions = <11 12>;
            layers = <0 1>;
        };
    };

    macros {
        bt_0: bt_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 0>;
        };

        bt_1: bt_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 1>;
        };

        bt_2: bt_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 2>;
        };

        arigatou: arigatou {
            compatible = "zmk,behavior-macro";
            label = "ARIGATOU";
            #binding-cells = <0>;
            bindings = <&kp LANG1 &kp A &kp R &kp I &kp G &kp A &kp T &kp O &kp U &kp G &kp O &kp Z &kp A &kp I &kp M &kp A &kp S &kp U>;
        };

        yorosihku: yorosihku {
            compatible = "zmk,behavior-macro";
            label = "YOROSIHKU";
            #binding-cells = <0>;
            bindings = <&kp LANG1 &kp Y &kp O &kp R &kp O &kp S &kp I &kp K &kp U &kp O &kp N &kp E &kp G &kp A &kp I &kp I &kp T &kp A &kp S &kp I &kp M &kp A &kp S &kp U>;
        };

        shita_line: shita_line {
            compatible = "zmk,behavior-macro";
            label = "SHITA_LINE";
            #binding-cells = <0>;
            bindings = <&kp RG(RIGHT) &kp ENTER>;
        };

        ue_line: ue_line {
            compatible = "zmk,behavior-macro";
            label = "UE_LINE";
            #binding-cells = <0>;
            bindings = <&kp RG(LEFT) &kp ENTER &kp UP>;
        };
    };

    lp: lp {
        compatible = "zmk,behavior-hold-tap";
        label = "LAYER|KP";
        flavor = "hold-preferred";
        tapping-term-ms = <210>;
        quick-tap-ms = <210>;
        bindings = <&mo>, <&kp>;

        #binding-cells = <2>;
    };

    lpy: lpy {
        compatible = "zmk,behavior-hold-tap";
        label = "yLAYER|KP";
        flavor = "hold-preferred";
        tapping-term-ms = <250>;
        bindings = <&mo>, <&kp>;

        #binding-cells = <2>;
    };

    cm_right: cm_right {
        compatible = "zmk,behavior-hold-tap";
        label = "CM_RIGHT";
        flavor = "tap-preferred";
        tapping-term-ms = <175>;
        quick-tap-ms = <175>;

        //global-quick-tap;

        bindings = <&kp>, <&kp>;

        #binding-cells = <2>;
        hold-trigger-key-positions = <25 0 10 11 12 13 20 21 22 23 24 32 0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 25 32 33 34 35>;
    };

    cm_left: cm_left {
        compatible = "zmk,behavior-hold-tap";
        label = "CM_LEFT";
        bindings = <&kp>, <&kp>;

        #binding-cells = <2>;
        tapping-term-ms = <175>;
        quick-tap-ms = <175>;
        flavor = "tap-preferred";
        hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 26 27 28 29 30 31 35 36 37>;
    };

    new_behavior: new_behavior {
        compatible = "zmk,behavior-hold-tap";
        label = "NEW_BEHAVIOR";
        flavor = "hold-preferred";
        tapping-term-ms = <200>;
        quick-tap-ms = <200>;
        bindings = <&mo>, <&kp>;

        #binding-cells = <2>;
    };

    behaviors {
    };

    keymap {
        compatible = "zmk,keymap";

        // ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

        base_layer {
            label = "BASE";
            bindings = <
              &kp Q             &kp W            &kp E            &kp R             &kp T                  &kp Y                 &kp U              &kp I             &kp O             &kp P
              &cm_left LCTRL F  &cm_left LALT A  &cm_left LGUI D  &cm_left LSHFT S  &cm_left LS(LGUI) G    &cm_right RS(RGUI) H  &cm_right RSHFT J  &cm_right RGUI K  &cm_right RALT L  &cm_right RCTRL MINUS
&lp 3 ESCAPE  &kp Z             &kp X            &kp C            &kp V             &kp B                  &kp N                 &kp M              &kp COMMA         &kp DOT           &kp SLASH              &kp SLASH
                                                 &lp 3 ESCAPE     &lp 4 SPACE       &mt LGUI BACKSPACE     &lp 5 BACKSPACE       &lpy 2 ENTER       &lp 5 TAB
            >;
        };

        inp_layer {
            label = "INP";
            bindings = <
          &kp Q  &kp L  &kp E  &kp O        &kp COMMA        &kp PERIOD  &kp W         &kp R  &kp Y  &kp P
          &kp F  &kp I  &kp A  &kp U        &kp Z            &kp K       &kp T         &kp N  &kp S  &kp H
&kp FSLH  &kp V  &kp X  &kp C  &kp Z        &kp MINUS        &kp G       &kp D         &kp M  &kp J  &kp B  &kp MINUS
                        &none  &lp 4 SPACE  &kp BACKSPACE    &none       &lpy 2 ENTER  &none
            >;
        };

        nav_layer {
            label = "NAV";
            bindings = <
       &none         &kp LG(LEFT_ARROW)  &kp UP_ARROW    &kp LG(RIGHT)    &kp LG(T)        &none      &none      &none     &kp RG(O)  &none
       &kp LA(LEFT)  &kp LEFT_ARROW      &kp DOWN_ARROW  &kp RIGHT_ARROW  &kp LA(RIGHT)    &kp RCTRL  &kp RSHFT  &kp RGUI  &kp RALT   &kp RCTRL
&none  &kp LG(Z)     &kp LG(X)           &kp LG(C)       &kp LG(V)        &kp LG(B)        &kp RG(N)  &none      &none     &none      &none      &none
                                         &none           &kp SPACE        &kp BACKSPACE    &none      &none      &none
            >;
        };

        num_layer {
            label = "NUM";
            bindings = <
            &bt_0  &kp F7  &kp F8  &kp F9        &kp F12         &none      &kp N7  &kp N8  &kp N9  &none
            &bt_1  &kp F4  &kp F5  &kp F6        &kp F11         &kp PLUS   &kp N4  &kp N5  &kp N6  &kp MINUS
&bt BT_CLR  &bt_2  &kp F1  &kp F2  &kp F3        &kp F10         &kp STAR   &kp N1  &kp N2  &kp N3  &kp FSLH   &kp FSLH
                           &none   &out OUT_USB  &out OUT_BLE    &kp LANG2  &kp N0  &kp N0
            >;
        };

        sym_layer {
            label = "SYM";
            bindings = <
          &kp EXCL      &kp AT     &kp HASH       &kp DLLR          &kp PRCNT    &kp CARET       &kp AMPS        &kp STAR  &kp LBRC   &kp RBRC
          &kp QUESTION  &kp BSLH   &kp PIPE       &kp EQUAL         &kp PLUS     &kp GRAVE       &kp SQT         &kp DQT   &kp COLON  &kp SEMI
&kp EXCL  &kp LEFT      &kp RIGHT  &kp LESS_THAN  &kp GREATER_THAN  &kp EXCL     &kp QUESTION    &kp LPAR        &kp RPAR  &kp LBKT   &kp RBKT  &kp TILDE
                                   &none          &none             &none        &kp LANGUAGE_2  &kp LANGUAGE_1  &none
            >;
        };

        fnc_layer {
            label = "FNC";
            bindings = <
       &none        &kp RC(RS(TAB))           &kp RG(RA(RS(RC(UP))))    &kp RC(TAB)                &none            &kp C_PP    &kp C_PREVIOUS        &kp C_NEXT            &none  &none
       &kp RA(TAB)  &kp RG(RA(RS(RC(LEFT))))  &kp RG(RA(RS(RC(DOWN))))  &kp RG(RA(RC(RS(RIGHT))))  &kp RG(TAB)      &kp K_MUTE  &kp RS(RA(C_VOL_DN))  &kp RS(RA(C_VOL_UP))  &none  &none
&none  &none        &kp RA(UP)                &kp RG(RA(RS(RC(N))))     &kp RA(DOWN)               &none            &none       &kp C_BRI_DEC         &kp C_BRI_INC         &none  &none  &kp C_POWER
                                              &kp LG(N0)                &kp LG(PLUS)               &kp LG(MINUS)    &none       &none                 &none
            >;
        };

        //nav_layer { label = "template"; bindings = <
        //          &none          &none          &none          &none          &none          &none          &none          &none          &none          &none
        //          &none          &none          &none          &none          &none          &none          &none          &none          &none          &none          
        //&none          &none          &none          &none          &none          &none          &none          &none          &none          &none          &none          &none          
        //                                      &none          &none          &none          &none          &none          &none
        //>;};
        // ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";
    };
};
